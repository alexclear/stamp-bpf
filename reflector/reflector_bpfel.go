// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || arm || arm64 || loong64 || mips64le || mipsle || ppc64le || riscv64 || wasm

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadReflector returns the embedded CollectionSpec for reflector.
func loadReflector() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_ReflectorBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load reflector: %w", err)
	}

	return spec, err
}

// loadReflectorObjects loads reflector and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*reflectorObjects
//	*reflectorPrograms
//	*reflectorMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadReflectorObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadReflector()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// reflectorSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type reflectorSpecs struct {
	reflectorProgramSpecs
	reflectorMapSpecs
	reflectorVariableSpecs
}

// reflectorProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type reflectorProgramSpecs struct {
	ReflectorIn  *ebpf.ProgramSpec `ebpf:"reflector_in"`
	ReflectorOut *ebpf.ProgramSpec `ebpf:"reflector_out"`
}

// reflectorMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type reflectorMapSpecs struct {
}

// reflectorVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type reflectorVariableSpecs struct {
}

// reflectorObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadReflectorObjects or ebpf.CollectionSpec.LoadAndAssign.
type reflectorObjects struct {
	reflectorPrograms
	reflectorMaps
	reflectorVariables
}

func (o *reflectorObjects) Close() error {
	return _ReflectorClose(
		&o.reflectorPrograms,
		&o.reflectorMaps,
	)
}

// reflectorMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadReflectorObjects or ebpf.CollectionSpec.LoadAndAssign.
type reflectorMaps struct {
}

func (m *reflectorMaps) Close() error {
	return _ReflectorClose()
}

// reflectorVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to loadReflectorObjects or ebpf.CollectionSpec.LoadAndAssign.
type reflectorVariables struct {
}

// reflectorPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadReflectorObjects or ebpf.CollectionSpec.LoadAndAssign.
type reflectorPrograms struct {
	ReflectorIn  *ebpf.Program `ebpf:"reflector_in"`
	ReflectorOut *ebpf.Program `ebpf:"reflector_out"`
}

func (p *reflectorPrograms) Close() error {
	return _ReflectorClose(
		p.ReflectorIn,
		p.ReflectorOut,
	)
}

func _ReflectorClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed reflector_bpfel.o
var _ReflectorBytes []byte
