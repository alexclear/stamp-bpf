// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64

package reflector

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// LoadReflector returns the embedded CollectionSpec for Reflector.
func LoadReflector() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_ReflectorBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load Reflector: %w", err)
	}

	return spec, err
}

// LoadReflectorObjects loads Reflector and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*ReflectorObjects
//	*ReflectorPrograms
//	*ReflectorMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadReflectorObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadReflector()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// ReflectorSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type ReflectorSpecs struct {
	ReflectorProgramSpecs
	ReflectorMapSpecs
	ReflectorVariableSpecs
}

// ReflectorProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type ReflectorProgramSpecs struct {
	ReflectorIn  *ebpf.ProgramSpec `ebpf:"reflector_in"`
	ReflectorOut *ebpf.ProgramSpec `ebpf:"reflector_out"`
}

// ReflectorMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type ReflectorMapSpecs struct {
}

// ReflectorVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type ReflectorVariableSpecs struct {
	Laddr  *ebpf.VariableSpec `ebpf:"laddr"`
	S_port *ebpf.VariableSpec `ebpf:"s_port"`
	Tai    *ebpf.VariableSpec `ebpf:"tai"`
}

// ReflectorObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadReflectorObjects or ebpf.CollectionSpec.LoadAndAssign.
type ReflectorObjects struct {
	ReflectorPrograms
	ReflectorMaps
	ReflectorVariables
}

func (o *ReflectorObjects) Close() error {
	return _ReflectorClose(
		&o.ReflectorPrograms,
		&o.ReflectorMaps,
	)
}

// ReflectorMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadReflectorObjects or ebpf.CollectionSpec.LoadAndAssign.
type ReflectorMaps struct {
}

func (m *ReflectorMaps) Close() error {
	return _ReflectorClose()
}

// ReflectorVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to LoadReflectorObjects or ebpf.CollectionSpec.LoadAndAssign.
type ReflectorVariables struct {
	Laddr  *ebpf.Variable `ebpf:"laddr"`
	S_port *ebpf.Variable `ebpf:"s_port"`
	Tai    *ebpf.Variable `ebpf:"tai"`
}

// ReflectorPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadReflectorObjects or ebpf.CollectionSpec.LoadAndAssign.
type ReflectorPrograms struct {
	ReflectorIn  *ebpf.Program `ebpf:"reflector_in"`
	ReflectorOut *ebpf.Program `ebpf:"reflector_out"`
}

func (p *ReflectorPrograms) Close() error {
	return _ReflectorClose(
		p.ReflectorIn,
		p.ReflectorOut,
	)
}

func _ReflectorClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed reflector_x86_bpfel.o
var _ReflectorBytes []byte
