// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64

package sender

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"
	"structs"

	"github.com/cilium/ebpf"
)

type SenderPacketTs struct {
	_   structs.HostLayout
	Seq uint32
	Ts  [4]uint64
}

// LoadSender returns the embedded CollectionSpec for Sender.
func LoadSender() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_SenderBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load Sender: %w", err)
	}

	return spec, err
}

// LoadSenderObjects loads Sender and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*SenderObjects
//	*SenderPrograms
//	*SenderMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadSenderObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadSender()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// SenderSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type SenderSpecs struct {
	SenderProgramSpecs
	SenderMapSpecs
	SenderVariableSpecs
}

// SenderProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type SenderProgramSpecs struct {
	SenderIn  *ebpf.ProgramSpec `ebpf:"sender_in"`
	SenderOut *ebpf.ProgramSpec `ebpf:"sender_out"`
}

// SenderMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type SenderMapSpecs struct {
	Hist   *ebpf.MapSpec `ebpf:"hist"`
	Output *ebpf.MapSpec `ebpf:"output"`
}

// SenderVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type SenderVariableSpecs struct {
}

// SenderObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadSenderObjects or ebpf.CollectionSpec.LoadAndAssign.
type SenderObjects struct {
	SenderPrograms
	SenderMaps
	SenderVariables
}

func (o *SenderObjects) Close() error {
	return _SenderClose(
		&o.SenderPrograms,
		&o.SenderMaps,
	)
}

// SenderMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadSenderObjects or ebpf.CollectionSpec.LoadAndAssign.
type SenderMaps struct {
	Hist   *ebpf.Map `ebpf:"hist"`
	Output *ebpf.Map `ebpf:"output"`
}

func (m *SenderMaps) Close() error {
	return _SenderClose(
		m.Hist,
		m.Output,
	)
}

// SenderVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to LoadSenderObjects or ebpf.CollectionSpec.LoadAndAssign.
type SenderVariables struct {
}

// SenderPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadSenderObjects or ebpf.CollectionSpec.LoadAndAssign.
type SenderPrograms struct {
	SenderIn  *ebpf.Program `ebpf:"sender_in"`
	SenderOut *ebpf.Program `ebpf:"sender_out"`
}

func (p *SenderPrograms) Close() error {
	return _SenderClose(
		p.SenderIn,
		p.SenderOut,
	)
}

func _SenderClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed sender_x86_bpfel.o
var _SenderBytes []byte
